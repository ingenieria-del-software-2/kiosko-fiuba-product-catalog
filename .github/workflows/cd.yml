name: CD

on: push

env:
  AWS_REGION: us-east-1
  MICROSERVICE_NAME: product_catalog
  IMAGE_TAG: ${{ github.sha }}
  ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: product_catalog

jobs:
  build:
    name: Build and push image
    runs-on: ubuntu-latest

    steps:
      # ----- SOURCE -----
      - name: Checkout repo
        uses: actions/checkout@v4

      # ----- AWS / ECR -----
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # ----- BUILD & PUSH -----
      - name: Build and push Docker image
        run: |
          set -e
          IMAGE_URI="${ECR_URI}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Building image $IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push  "$IMAGE_URI"

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      # ----- COPY COMPOSE FILE -----
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Upload PROD docker compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: compose.prod.yml
          target: /opt/apps/${{ env.MICROSERVICE_NAME }}

      # ----- REMOTE DEPLOY -----
      - name: SSH & deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /opt/apps/${{ env.MICROSERVICE_NAME }}

            # Construct the same image URI as in the build job
            IMAGE_URI="${{ env.ECR_URI }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            echo "IMAGE_URI=$IMAGE_URI" > .env

            docker compose pull
            docker compose -f compose.prod.yml up -d --remove-orphans